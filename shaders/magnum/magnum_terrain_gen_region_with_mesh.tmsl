imports: [
    { name: "region_pos" type: "float3" }
    { name: "cell_size" type: "float" }

    { name: "densities" type: "buffer" }
    { name: "region_indirect" type: "buffer" uav: true }
    { name: "vertices" type: "buffer" uav: true }
    { name: "triangles" type: "buffer" uav: true }
]

compile: {
    includes: [ "magnum_common", "magnum_linalg" ]
}

common: [[
    float3 min_qef(float3 p[12], float3 n[12], uint count) {
        float3x3 A = 0;
        float3 b = 0;
        for (uint i = 0; i < count; ++i) {
            A._m00 += n[i].x * n[i].x;
            A._m01 += n[i].x * n[i].y;
            A._m02 += n[i].x * n[i].z;
            A._m11 += n[i].y * n[i].y;
            A._m12 += n[i].y * n[i].z;
            A._m22 += n[i].z * n[i].z;

            float d = dot(n[i], p[i]);
            b += n[i] * d;
        }

        A._m10 = A._m01;
        A._m21 = A._m12;
        A._m20 = A._m02;

        float3 c = float3(0, 0, 0);
        float one_to_n = rcp((float)count);
        for (uint ip = 0; ip < count; ip++) {
            c += p[ip] * one_to_n;
        }

        //return float3(0.5, 0.5, 0.5);
        //return saturate(c);
        return solve_linear(A, b, (c));
    }

    float3 find_vertex(float3 p[12], float3 n[12], float edge_signs[8], uint count) {
        //return (min_qef(p, n, count));

        const float3 edges[8] = {
            float3(0, 0, 0),
            float3(0, 0, 1),
            float3(0, 1, 0),
            float3(0, 1, 1),
            float3(1, 0, 0),
            float3(1, 0, 1),
            float3(1, 1, 0),
            float3(1, 1, 1),
        };
        // force at each edge
        float3 f[8] = {
            float3(0, 0, 0),
            float3(0, 0, 0),
            float3(0, 0, 0),
            float3(0, 0, 0),
            float3(0, 0, 0),
            float3(0, 0, 0),
            float3(0, 0, 0),
            float3(0, 0, 0),
        };

        float3 c = float3(0, 0, 0);
        float one_to_n = rcp((float)count);
        for (uint i = 0; i < count; i++) {
            // distance to the plane at point p[i] with normal n[i]
            float d = dot(p[i], n[i]);

            c += p[i] * one_to_n;
            for (uint e = 0; e < 8; ++e) {
                // add force pointed from the edge towards the plane
                f[e] -= n[i] * edge_signs[e] * abs(dot(edges[e], n[i]) - d);
            }
        }

        float last_dot = 10000000.f;
        for (uint iter = 0; iter < 20; ++iter) {
            float3 f_total = trilerp(f, c);

            float len_sq = dot(f_total, f_total);
            if (len_sq * 0.0025 < 0.001 || len_sq > last_dot) {
                break;
            }
            last_dot = len_sq;

            c += f_total * 0.05;
        }
        return c;
    }
]]

compute_shader: {
    import_system_semantics: [ "dispatch_thread_id" ]

    attributes: {
        num_threads: [32, 1, 1]
    }

    code: [[
        uint3 cell = dispatch_thread_id;

        float4 v[2][2][2];
        load_cell_densities(get_densities(), cell, v);

        float3 cellf = (float3)cell;
        uint3 cellout = (uint3)step(float3(1, 1, 1), cellf);

        // positions of sign changes on the edges of the cell
        float3 changes[12];
        // normals at the positions
        float3 normals[12];
        uint change_idx = 0;
        RWByteAddressBuffer region_indirect = get_region_indirect();
        RWByteAddressBuffer triangles = get_triangles();
        float3 margin = float3(REGION_MARGIN, REGION_MARGIN, REGION_MARGIN);
        float cell_size = load_cell_size();

        {
            for (uint dx = 0; dx != 2; ++dx) {
                for (uint dy = 0; dy != 2; ++dy) {
                    float v0 = v[dx][dy][0].w;
                    float v1 = v[dx][dy][1].w;
                    float solid0 = step(v0, 0);
                    float solid1 = step(v1, 0);
                    [branch]
                    if (solid0 != solid1) {
                        float distance = v0 / (v0 - v1);
                        changes[change_idx] = float3((float)dx, (float)dy, distance);
                        normals[change_idx] = normalize(lerp(v[dx][dy][0].xyz, v[dx][dy][1].xyz, distance));
                        //normals[change_idx] = trilerp(v, changes[change_idx]);
                        //normals[change_idx] = normalize(float3(nx, ny, nz));
                        //normals[change_idx] = magnum_density((cellf + changes[change_idx] - margin) * cell_size + load_region_pos(), cell_size).xyz;
                        ++change_idx;

                        [branch]
                        if ((1 - dx) & (1 - dy) & cellout.x & cellout.y) {
                            uint swap = (uint)(1 - solid0) * 2;
                            uint ltriangles[6];

                            ltriangles[0 + swap] = flat_offset(cell.x - 1, cell.y - 1, cell.z);
                            ltriangles[1 + 0000] = flat_offset(cell.x - 0, cell.y - 1, cell.z);
                            ltriangles[2 - swap] = flat_offset(cell.x - 1, cell.y - 0, cell.z);

                            ltriangles[3 + swap] = flat_offset(cell.x - 1, cell.y - 0, cell.z);
                            ltriangles[4 + 0000] = flat_offset(cell.x - 0, cell.y - 1, cell.z);
                            ltriangles[5 - swap] = flat_offset(cell.x - 0, cell.y - 0, cell.z);

                            uint index_start;
                            region_indirect.InterlockedAdd(0, (uint)6, index_start);
                            uint3 index_data = uint3(
                                (ltriangles[0]) | (ltriangles[1] << 16),
                                (ltriangles[2]) | (ltriangles[3] << 16),
                                (ltriangles[4]) | (ltriangles[5] << 16)
                            );
                            triangles.Store3(index_start << 1, index_data);
                        }
                    }
                }
            }
        }

        {
            for (uint dx = 0; dx != 2; ++dx) {
                for (uint dz = 0; dz != 2; ++dz) {
                    float v0 = v[dx][0][dz].w;
                    float v1 = v[dx][1][dz].w;
                    float solid0 = step(v0, 0);
                    float solid1 = step(v1, 0);
                    [branch]
                    if (solid0 != solid1) {
                        float distance = v0 / (v0 - v1);
                        changes[change_idx] = float3((float)dx, distance, (float)dz);
                        normals[change_idx] = normalize(lerp(v[dx][0][dz].xyz, v[dx][1][dz].xyz, distance));
                        //normals[change_idx] = trilerp(v, changes[change_idx]);
                        //normals[change_idx] = magnum_density((cellf + changes[change_idx] - margin) * cell_size + load_region_pos(), cell_size).xyz;
                        ++change_idx;

                        [branch]
                        if ((1 - dx) & (1 - dz) & cellout.x & cellout.z) {
                            uint swap = (uint)(1 - solid1) * 2;
                            uint ltriangles[6];

                            ltriangles[0 + swap] = flat_offset(cell.x - 1, cell.y, cell.z - 1);
                            ltriangles[1 + 0000] = flat_offset(cell.x - 0, cell.y, cell.z - 1);
                            ltriangles[2 - swap] = flat_offset(cell.x - 1, cell.y, cell.z - 0);

                            ltriangles[3 + swap] = flat_offset(cell.x - 0, cell.y, cell.z - 1);
                            ltriangles[4 + 0000] = flat_offset(cell.x - 0, cell.y, cell.z - 0);
                            ltriangles[5 - swap] = flat_offset(cell.x - 1, cell.y, cell.z - 0);

                            uint index_start;
                            region_indirect.InterlockedAdd(0, (uint)6, index_start);
                            uint3 index_data = uint3(
                                (ltriangles[0]) | (ltriangles[1] << 16),
                                (ltriangles[2]) | (ltriangles[3] << 16),
                                (ltriangles[4]) | (ltriangles[5] << 16)
                            );
                            triangles.Store3(index_start << 1, index_data);
                        }
                    }
                }
            }
        }

        {
            for (uint dy = 0; dy != 2; ++dy) {
                for (uint dz = 0; dz != 2; ++dz) {
                    float v0 = v[0][dy][dz].w;
                    float v1 = v[1][dy][dz].w;
                    float solid0 = step(v0, 0);
                    float solid1 = step(v1, 0);
                    [branch]
                    if (solid0 != solid1) {
                        float distance = v0 / (v0 - v1);
                        changes[change_idx] = float3(distance, (float)dy, (float)dz);
                        normals[change_idx] = normalize(lerp(v[0][dy][dz].xyz, v[1][dy][dz].xyz, distance));
                        //normals[change_idx] = trilerp(v, changes[change_idx]);
                        //normals[change_idx] = magnum_density((cellf + changes[change_idx] - margin) * cell_size + load_region_pos(), cell_size).xyz;
                        ++change_idx;

                        [branch]
                        if ((1 - dy) & (1 - dz) & cellout.y & cellout.z) {
                            uint swap = (uint)(1 - solid0) * 2;
                            uint ltriangles[6];
                            ltriangles[0 + swap] = flat_offset(cell.x, cell.y - 1, cell.z - 1);
                            ltriangles[1 + 0000] = flat_offset(cell.x, cell.y - 0, cell.z - 1);
                            ltriangles[2 - swap] = flat_offset(cell.x, cell.y - 1, cell.z - 0);

                            ltriangles[3 + swap] = flat_offset(cell.x, cell.y - 0, cell.z - 1);
                            ltriangles[4 + 0000] = flat_offset(cell.x, cell.y - 0, cell.z - 0);
                            ltriangles[5 - swap] = flat_offset(cell.x, cell.y - 1, cell.z - 0);

                            uint index_start;
                            region_indirect.InterlockedAdd(0, (uint)6, index_start);
                            uint3 index_data = uint3(
                                (ltriangles[0]) | (ltriangles[1] << 16),
                                (ltriangles[2]) | (ltriangles[3] << 16),
                                (ltriangles[4]) | (ltriangles[5] << 16)
                            );
                            triangles.Store3(index_start << 1, index_data);
                        }
                    }
                }
            }
        }

        [branch]
        if (change_idx > 1) {
            const float edge_signs[2][2][2] = {
                step(0, v[0][0][0].w) * 2 - 1,
                step(0, v[0][0][1].w) * 2 - 1,
                step(0, v[0][1][0].w) * 2 - 1,
                step(0, v[0][1][1].w) * 2 - 1,
                step(0, v[1][0][0].w) * 2 - 1,
                step(0, v[1][0][1].w) * 2 - 1,
                step(0, v[1][1][0].w) * 2 - 1,
                step(0, v[1][1][1].w) * 2 - 1,
            };
            //float3 vertex_in_cell = find_vertex(changes, normals, edge_signs, change_idx);
            float3 vertex_in_cell = min_qef(changes, normals, change_idx);

            float3 wp = vertex_in_cell + cellf - margin;
            float3 wn = normalize(trilerp(v, vertex_in_cell));
            //wn = magnum_density(wp, cell_size).xyz;
            //wn = v[0][0][0].xyz;

            uint3 vertex_data = uint3(
                f32tof16(wp.x) | (f32tof16(wp.y) << 16),
                f32tof16(wp.z) | (f32tof16(wn.x) << 16),
                f32tof16(wn.y) | (f32tof16(wn.z) << 16)
            );

            uint vertex_offset = flat_offset(cell.x, cell.y, cell.z);
            get_vertices().Store3(vertex_offset * 12, vertex_data);
        }
    ]]
}
