common: [[

    #define ROTATE(a1, a2) \
        g = a1; \
        h = a2; \
        a1 = g - s * (h + g * tau); \
        a2 = h + s * (g - h * tau); \

    #define ELEMENT_ITERATION(elem, d1, d2, z1, z2, rotations) \
        g = 100.0 * abs(elem); \
        if (i > 4 && (abs(d1) + g) == abs(d1) && (abs(d2) + g) == abs(d2)) { \
            elem = 0.0; \
        } else if (abs(elem) > tresh) { \
            float h = d2 - d1; \
            float t; \
            if ((abs(h) + g) == abs(h)) { \
                t = elem / h; \
            } else { \
                float theta = 0.5 * h / elem; \
                t = 1.0 / (abs(theta) + sqrt(1.0 + theta * theta));  \
                t *= step(0.0, theta) * 2.0 - 1.0; \
            } \
            float c = 1.0 / sqrt(1.0 + t * t); \
            float s = t * c; \
            float tau = s / (1.0 + c); \
            h = t * elem; \
            z1 -= h; \
            z2 += h; \
            d1 -= h; \
            d2 += h; \
            elem = 0.0; \
            rotations \
        } \


    void eigen_decompose(float3x3 A, out float3x3 V, out float3x3 E) {
        // Explanation in Numerical Recipies in C, Second Edition, page 463
        // https://www.cec.uchile.cl/cinetica/pcordero/MC_libros/NumericalRecipesinC.pdf

        V = float3x3(
             1, 0, 0 ,
             0, 1, 0 ,
             0, 0, 1
        );

        float3 b = float3(A._11, A._22, A._33);
        float3 d = b;
        float3 z = 0;

        float g;
        for (uint i = 1; i <= 50; ++i) {
            float sm = abs(A._12) + abs(A._13) + abs(A._23);
            if (sm == 0.0)
                break;

            float tresh;
            if (i < 4)
                tresh = 0.2 * sm / 9.0;
            else
                tresh = 0.0;

            ELEMENT_ITERATION(A._12, d.x, d.y, z.x, z.y, {
                ROTATE(A._13, A._23);

                ROTATE(V._11, V._12);
                ROTATE(V._21, V._22);
                ROTATE(V._31, V._32);
            });

            ELEMENT_ITERATION(A._13, d.x, d.z, z.x, z.z, {
                ROTATE(A._12, A._23);

                ROTATE(V._11, V._13);
                ROTATE(V._21, V._23);
                ROTATE(V._31, V._33);
            });

            ELEMENT_ITERATION(A._23, d.y, d.z, z.y, z.z, {
                ROTATE(A._12, A._13);

                ROTATE(V._12, V._13);
                ROTATE(V._22, V._23);
                ROTATE(V._32, V._33);
            });

            b += z;
            d = b;
            z = 0;
        }

        E = float3x3(
             d.x, 0, 0 ,
             0, d.y, 0 ,
             0, 0, d.z
        );
    }

    float3 solve_linear(float3x3 A, float3 b, float3 mid) {
        float3x3 V;
        float3x3 E;
        eigen_decompose(A, V, E);

        float max_val = max(max(abs(E._11), abs(E._22)), abs(E._33));
        float tresh = 0.1;

        E._11 = rcp(abs(E._11)) * step(tresh, abs(E._11) / max_val);
        E._22 = rcp(abs(E._22)) * step(tresh, abs(E._22) / max_val);
        E._33 = rcp(abs(E._33)) * step(tresh, abs(E._33) / max_val);

        return mid + mul(mul(mul(V, E), transpose(V)), b - mul(A, mid));
    }
]]