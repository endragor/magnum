common: [[
    #define REGION_SIZE 32
    #define REGION_MARGIN 2

    float4 sphere_density(float3 p, float3 c, float r) {
        float4 ret;

        float3 diff = p - c;
        float diff_len = length(diff);
        ret.w = diff_len - r;
        ret.xyz = normalize(diff);// / diff_len;

        return ret;
    }

    float density_bias(float cell_size) {
        //return 0;
        return -((cell_size * cell_size) - 2.0) * 0.0001;
    }

    // offset for cell corner
    uint flat_offset(uint x, uint y, uint z) {
        return x * (REGION_SIZE + 1) * (REGION_SIZE + 1) + y * (REGION_SIZE + 1) + z;
    }

    float3 trilerp(float3 corners[2][2][2], float3 c) {
        // Trilinear interpolation
        float3 yz00 = lerp(corners[0][0][0], corners[1][0][0], c.x);
        float3 yz01 = lerp(corners[0][0][1], corners[1][0][1], c.x);
        float3 yz10 = lerp(corners[0][1][0], corners[1][1][0], c.x);
        float3 yz11 = lerp(corners[0][1][1], corners[1][1][1], c.x);

        float3 z0 = lerp(yz00, yz10, c.y);
        float3 z1 = lerp(yz01, yz11, c.y);

        return lerp(z0, z1, c.z);
    }

    float trilerp(float corners[2][2][2], float3 c) {
        // Trilinear interpolation
        float fx1 = lerp(corners[0][0][0], corners[1][0][0], c.x);
        float fx2 = lerp(corners[0][0][1], corners[1][0][1], c.x);
        float fx3 = lerp(corners[0][1][0], corners[1][1][0], c.x);
        float fx4 = lerp(corners[0][1][1], corners[1][1][1], c.x);

        float fy1 = lerp(fx1, fx3, c.y);
        float fy2 = lerp(fx2, fx4, c.y);

        return lerp(fy1, fy2, c.z);
    }

    float3 trilerp(float4 corners[2][2][2], float3 c) {
        // Trilinear interpolation
        float3 fx1 = lerp(corners[0][0][0].xyz, corners[1][0][0].xyz, c.x);
        float3 fx2 = lerp(corners[0][0][1].xyz, corners[1][0][1].xyz, c.x);
        float3 fx3 = lerp(corners[0][1][0].xyz, corners[1][1][0].xyz, c.x);
        float3 fx4 = lerp(corners[0][1][1].xyz, corners[1][1][1].xyz, c.x);

        float3 fy1 = lerp(fx1, fx3, c.y);
        float3 fy2 = lerp(fx2, fx4, c.y);

        return lerp(fy1, fy2, c.z);
    }


    float4 unpack_density(uint2 d) {
        return float4(
            f16tof32(d.x & 0xFFFF),
            f16tof32((d.x & 0xFFFF0000) >> 16),
            f16tof32(d.y & 0xFFFF),
            f16tof32((d.y & 0xFFFF0000) >> 16)
        );
    }

    float4 load_density(ByteAddressBuffer b, uint3 offset) {
        uint2 d = b.Load2(flat_offset(offset.x, offset.y, offset.z) * 8);
        return unpack_density(d);
    }

    float4 load_density(RWByteAddressBuffer b, uint3 offset) {
        uint2 d = b.Load2(flat_offset(offset.x, offset.y, offset.z) * 8);
        return unpack_density(d);
    }

    void load_two_densities(ByteAddressBuffer b, uint3 offset, out float4 densities[2]) {
        uint4 d = b.Load4(flat_offset(offset.x, offset.y, offset.z) * 8);
        densities[0] = unpack_density(d.xy);
        densities[1] = unpack_density(d.zw);
    }

    void store_density(RWByteAddressBuffer b, uint3 offset, float4 d) {
        uint2 packed = uint2(
            f32tof16(d.x) | (f32tof16(d.y) << 16),
            f32tof16(d.z) | (f32tof16(d.w) << 16)
        );
        b.Store2(flat_offset(offset.x, offset.y, offset.z) * 8, packed);
    }

    void load_cell_densities(ByteAddressBuffer densities, uint3 cell, out float4 v[2][2][2]) {
        load_two_densities(densities, cell + uint3(0, 0, 0), v[0][0]);
        load_two_densities(densities, cell + uint3(0, 1, 0), v[0][1]);
        load_two_densities(densities, cell + uint3(1, 0, 0), v[1][0]);
        load_two_densities(densities, cell + uint3(1, 1, 0), v[1][1]);
    }

    void update_region_bounds(RWByteAddressBuffer region_info, float3 wp) {
        float3 wp_transformed = max(0.0, (wp + (REGION_MARGIN + 1))) * 1000.0;
        uint3 minimum = floor(wp_transformed);
        uint3 maximum = ceil(wp_transformed);
        region_info.InterlockedMin(4,  minimum.x);
        region_info.InterlockedMin(8,  minimum.y);
        region_info.InterlockedMin(12, minimum.z);

        region_info.InterlockedMax(16, maximum.x);
        region_info.InterlockedMax(20, maximum.y);
        region_info.InterlockedMax(24, maximum.z);
    }
]]
