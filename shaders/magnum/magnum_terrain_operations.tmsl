imports: [
    { name: "region_pos" type: "float3" }
    { name: "cell_size" type: "float" }

    { name: "densities" type: "buffer" uav:true }

    // 0 - union
    { name: "operation" type: "uint" }
    // 0 - sphere
    { name: "primitive_type" type: "uint" }
    { name: "primitive_position" type: "float3" }
    { name: "primitive_size" type: "float3" }
]

common: [[
]]


compute_shader: {
    import_system_semantics: [ "dispatch_thread_id" ]

    attributes: {
        num_threads: [36, 1, 1]
    }

    code: [[
        float3 margin = float3(REGION_MARGIN, 0, 0);
        float cell_size = load_cell_size();

        //uint op = load_operation();
        //uint primitive = load_primitive();

        RWByteAddressBuffer densities = get_densities();

        float cur_density = load_density(densities, dispatch_thread_id).w;

        float3 pos = load_region_pos() + ((float3)dispatch_thread_id - margin.xxx) * cell_size;
        float4 primitive_density;
        primitive_density = sphere_density(pos, load_primitive_position(), load_primitive_size().x);
        primitive_density.w -= density_bias(cell_size);

        [branch]
        if (primitive_density.w < cur_density) {
            store_density(densities, dispatch_thread_id, primitive_density);
        }
    ]]
}

compile: {
    includes: ["magnum_common"]
}